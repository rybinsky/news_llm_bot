import os
import requests
from bs4 import BeautifulSoup
from PIL import Image, ImageDraw, ImageFont
import textwrap
from dotenv import load_dotenv
import streamlit as st
from langchain_community.llms import Ollama
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama
def init_llm(model_name="gemma3:1b"):
    return Ollama(
        base_url=os.getenv("OLLAMA_BASE_URL"),
        model=model_name,
        temperature=0.7,
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
def get_news(topics=["technology", "politics", "entertainment"], num_news=5):
    news_items = []
    try:
        for topic in topics:
            url = f"https://news.google.com/topics/CAAqIQgKIhtDQkFTRGdvSUwyMHZNRFppYm5vU0FuSjFLQUFQAQ?hl=ru&gl=RU&ceid=RU%3Aru"
            response = requests.get(url)
            soup = BeautifulSoup(response.content, "lxml-xml")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º lxml –¥–ª—è XML
            items = soup.find_all("item")[:num_news]
            for item in items:
                news_items.append({
                    "title": item.title.text,
                    "link": item.link.text,
                    "source": item.source.text,
                    "topic": topic
                })
    except Exception as e:
        st.error(f"Error fetching news: {e}")
    return news_items

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∏ –¥–ª—è –º–µ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–∏
def generate_meme_idea(news_item, llm):
    prompt = ChatPromptTemplate.from_messages([
        ("system", """–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏—Ä—É—Å–Ω—ã—Ö –º–µ–º–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞, —Ç—ã –≤–∏–¥–∏—à—å –º–µ—Å—Ç–∞ –¥–ª—è –Ω–µ–≥–æ.
        –Ø –¥–∞–º —Ç–µ–±–µ –Ω–æ–≤–æ—Å—Ç—å, –∞ —Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏–¥—É–º–∞–π:
        1. –û—Å—Ç—Ä—É—é –ø–µ—Ä–≤—É—é —Ñ—Ä–∞–∑—É (–≤–µ—Ä—Ö –º–µ–º–∞)
        2. –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –≤—Ç–æ—Ä—É—é —Ñ—Ä–∞–∑—É (–Ω–∏–∑ –º–µ–º–∞)
        3. –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —é–º–æ—Ä–∞

        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        –í–µ—Ä—Ö: [—Ñ—Ä–∞–∑–∞ 1]
        –ù–∏–∑: [—Ñ—Ä–∞–∑–∞ 2]
        –°–æ–ª—å: [–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —é–º–æ—Ä–∞]"""),
        ("user", "–ù–æ–≤–æ—Å—Ç—å: {news_title}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {news_source}\n–¢–µ–º–∞: {news_topic}")
    ])
    
    chain = prompt | llm | StrOutputParser()
    result = chain.invoke({
        "news_title": news_item["title"],
        "news_source": news_item["source"],
        "news_topic": news_item["topic"]
    })
    return result

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
def create_meme_image(top_text, bottom_text, format_suggestion):
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞
    # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    width, height = 800, 600
    img = Image.new('RGB', (width, height), color=(255, 255, 255))
    d = ImageDraw.Draw(img)
    
    try:
        font = ImageFont.truetype("arial.ttf", 40)
    except:
        font = ImageFont.load_default()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    top_lines = textwrap.wrap(top_text, width=20)
    bottom_lines = textwrap.wrap(bottom_text, width=20)
    
    # –†–∏—Å—É–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
    y_text = 10
    for line in top_lines:
        w, h = d.textsize(line, font=font)
        d.text(((width - w) / 2, y_text), line, font=font, fill=(0, 0, 0))
        y_text += h + 10
    
    # –†–∏—Å—É–µ–º –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
    y_text = height - 100
    for line in bottom_lines:
        w, h = d.textsize(line, font=font)
        d.text(((width - w) / 2, y_text), line, font=font, fill=(0, 0, 0))
        y_text += h + 10
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ
    d.text((10, height - 30), f"Suggested format: {format_suggestion}", font=ImageFont.load_default(), fill=(150, 150, 150))
    
    return img

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit
def main():
    st.title("üé≠ AI-–∞–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–µ–º–æ–≤")
    st.markdown("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ –≤–∏—Ä—É—Å–Ω—ã–µ –º–µ–º—ã")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_name = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
        ["gemma3:1b"],
        index=0
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    if st.sidebar.button("–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"):
        st.session_state.news = get_news()
    
    if "news" not in st.session_state:
        st.session_state.news = []
    
    if st.session_state.news:
        st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
        news_index = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –º–µ–º–∞",
            range(len(st.session_state.news)),
            format_func=lambda x: st.session_state.news[x]["title"]
        )
        selected_news = st.session_state.news[news_index]
        
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é –¥–ª—è –º–µ–º–∞..."):
                llm = init_llm(model_name)
                meme_idea = generate_meme_idea(selected_news, llm)
                st.session_state.meme_idea = meme_idea
            
        if "meme_idea" in st.session_state:
            st.subheader("–ò–¥–µ—è –¥–ª—è –º–µ–º–∞")
            st.text(st.session_state.meme_idea)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
            try:
                parts = {
                    "Caption": "",
                    "Punchline": "",
                    "Format": "",
                    "Context": ""
                }
                current_part = None
                
                for line in st.session_state.meme_idea.split("\n"):
                    if ":" in line:
                        part_name, content = line.split(":", 1)
                        part_name = part_name.strip()
                        if part_name in parts:
                            current_part = part_name
                            parts[current_part] = content.strip()
                        else:
                            if current_part:
                                parts[current_part] += "\n" + line
                    elif current_part:
                        parts[current_part] += "\n" + line
                print(parts)
                # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞
                if parts["Caption"] and parts["Punchline"]:
                    with st.spinner("–°–æ–∑–¥–∞–µ–º –º–µ–º..."):
                        meme_img = create_meme_image(
                            parts["Caption"],
                            parts["Punchline"],
                            parts.get("Format", "Unknown format")
                        )
                        st.image(meme_img, caption=f"–ú–µ–º –Ω–∞ —Ç–µ–º—É: {selected_news['title']}")
                        
                        st.markdown("**–ü–æ—á–µ–º—É —ç—Ç–æ —Å–º–µ—à–Ω–æ:**")
                        st.write(parts.get("Context", "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞: {e}")
    else:
        st.info("–ù–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏' –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")

if __name__ == "__main__":
    main()